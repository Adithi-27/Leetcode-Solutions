# -*- coding: utf-8 -*-
"""2090. K Radius Subarray Averages.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pDPqcnacs5XN5LXupPLvzHS1YBX5iJd
"""

class Solution:
    def getAverages(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        # Result array initialized with -1 for all elements
        avgs = [-1] * n

        # Edge cases
        if k == 0:
            return nums
        if 2 * k + 1 > n:
            return avgs

        # Calculate the initial window sum of size (2 * k + 1)
        window_sum = sum(nums[:2 * k + 1])

        # Calculate the k-radius average for each valid index i
        for i in range(k, n - k):
            # Set the average at the current center
            avgs[i] = window_sum // (2 * k + 1)
            # Slide the window to the right
            if i + k + 1 < n:
                window_sum += nums[i + k + 1] - nums[i - k]

        return avgs