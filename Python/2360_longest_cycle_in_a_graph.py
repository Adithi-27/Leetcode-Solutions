# -*- coding: utf-8 -*-
"""2360. Longest Cycle in a Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSpFo1BTHTBuVVGEdpQPjbpb5tha772t
"""

class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        n = len(edges)
        visited = [False] * n
        result = -1

        def dfs(node, stack_index):
            nonlocal result
            if node == -1 or visited[node]:
                return
            if node in stack:
                cycle_length = stack_index - stack[node]
                result = max(result, cycle_length)
                return

            stack[node] = stack_index
            dfs(edges[node], stack_index + 1)
            stack.pop(node)
            visited[node] = True

        for i in range(n):
            if not visited[i]:
                stack = {}
                dfs(i, 0)

        return result