# -*- coding: utf-8 -*-
"""773. Sliding Puzzle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sb1VF4vV9uTMPh4NhbL5sV074kBqKVRM
"""

class Solution:
    def slidingPuzzle(self, board: list[list[int]]) -> int:
        start = ''.join(str(num) for row in board for num in row)
        target = "123450"

        neighbors = {
            0: [1, 3],
            1: [0, 2, 4],
            2: [1, 5],
            3: [0, 4],
            4: [1, 3, 5],
            5: [2, 4]
        }

        queue = deque([(start, start.index('0'), 0)])
        visited = set()
        visited.add(start)

        while queue:
            state, zero_pos, moves = queue.popleft()

            if state == target:
                return moves

            for neighbor in neighbors[zero_pos]:
                state_list = list(state)
                state_list[zero_pos], state_list[neighbor] = state_list[neighbor], state_list[zero_pos]
                new_state = ''.join(state_list)

                if new_state not in visited:
                    visited.add(new_state)
                    queue.append((new_state, neighbor, moves + 1))

        return -1