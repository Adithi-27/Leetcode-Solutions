# -*- coding: utf-8 -*-
"""2097. Valid Arrangement of Pairs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCO466HUMIjHuuvqo8enqaqT7Ifz9mBo
"""

class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:
        graph = defaultdict(deque)
        indegree = defaultdict(int)
        outdegree = defaultdict(int)

        for start, end in pairs:
            graph[start].append(end)
            outdegree[start] += 1
            indegree[end] += 1

        start_node = pairs[0][0]
        for node in outdegree:
            if outdegree[node] > indegree[node]:
                start_node = node
                break

        path = []

        def dfs(node):
            while graph[node]:
                next_node = graph[node].popleft()
                dfs(next_node)
            path.append(node)

        dfs(start_node)

        path.reverse()
        result = [[path[i], path[i + 1]] for i in range(len(path) - 1)]
        return result