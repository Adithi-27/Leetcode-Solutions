# -*- coding: utf-8 -*-
"""2471. Minimum Number of Operations to Sort a Binary Tree by Level.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_FyJWqF9g_z2lnoeCSP-fPR_aooACFB1
"""

class Solution:
    def minimumOperations(self, root: Optional[TreeNode]) -> int:
        def minSwapsToSort(arr):
            n = len(arr)
            paired = [(value, index) for index, value in enumerate(arr)]
            paired.sort(key=lambda x: x[0])
            visited = [False] * n
            swaps = 0
            for i in range(n):
                if visited[i] or paired[i][1] == i:
                    continue
                cycle_size = 0
                j = i
                while not visited[j]:
                    visited[j] = True
                    j = paired[j][1]
                    cycle_size += 1
                if cycle_size > 1:
                    swaps += cycle_size - 1
            return swaps
        queue = deque([root])
        total_swaps = 0
        while queue:
            level_size = len(queue)
            level_values = []
            for _ in range(level_size):
                node = queue.popleft()
                level_values.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            total_swaps += minSwapsToSort(level_values)
        return total_swaps