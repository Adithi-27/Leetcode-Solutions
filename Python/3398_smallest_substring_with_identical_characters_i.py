# -*- coding: utf-8 -*-
"""3398. Smallest Substring With Identical Characters I.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_FyJWqF9g_z2lnoeCSP-fPR_aooACFB1
"""

class Solution:
    def minLength(self, s: str, numOps: int) -> int:
        def can_achieve_length(target_len: int) -> bool:
            curr_dp = [[float('inf')] * (target_len + 1) for _ in range(2)]
            next_dp = [[float('inf')] * (target_len + 1) for _ in range(2)]

            first_bit = int(s[0] == '1')
            curr_dp[first_bit][1] = 0
            curr_dp[1 - first_bit][1] = 1

            for i in range(1, len(s)):
                for bit in range(2):
                    for length in range(1, target_len + 1):
                        next_dp[bit][length] = float('inf')

                curr_bit = int(s[i] == '1')

                for bit in range(2):
                    for curr_len in range(1, target_len + 1):
                        flips = curr_dp[bit][curr_len]
                        if flips == float('inf') or flips > numOps:
                            continue

                        new_len = curr_len + 1 if curr_bit == bit else 1
                        if new_len <= target_len:
                            next_dp[curr_bit][new_len] = min(next_dp[curr_bit][new_len], flips)

                        if flips + 1 <= numOps:
                            new_len = curr_len + 1 if (1 - curr_bit) == bit else 1
                            if new_len <= target_len:
                                next_dp[1 - curr_bit][new_len] = min(next_dp[1 - curr_bit][new_len], flips + 1)

                curr_dp, next_dp = next_dp, curr_dp

            return any(curr_dp[bit][length] <= numOps
                      for bit in range(2)
                      for length in range(1, target_len + 1))

        left, right = 1, len(s)
        result = len(s)

        while left <= right:
            mid = (left + right) // 2
            if can_achieve_length(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1

        return result