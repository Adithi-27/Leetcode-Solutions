# -*- coding: utf-8 -*-
"""2290. Minimum Obstacle Removal to Reach Corner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCO466HUMIjHuuvqo8enqaqT7Ifz9mBo
"""

class Solution:
    def minimumObstacles(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        deque_bfs = deque([(0, 0)])
        obstacles_removed = [[float('inf')] * n for _ in range(m)]
        obstacles_removed[0][0] = 0

        while deque_bfs:
            x, y = deque_bfs.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n:
                    new_cost = obstacles_removed[x][y] + grid[nx][ny]
                    if new_cost < obstacles_removed[nx][ny]:
                        obstacles_removed[nx][ny] = new_cost
                        if grid[nx][ny] == 0:
                            deque_bfs.appendleft((nx, ny))
                        else:
                            deque_bfs.append((nx, ny))

        return obstacles_removed[m - 1][n - 1]