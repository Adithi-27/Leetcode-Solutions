# -*- coding: utf-8 -*-
"""10. Regular Expression Matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12qUyPkm_5TKTBec_IztbMp3jQ2fsWVMm
"""

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        m, n = len(s), len(p)
        # Initialize the DP table with False
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        dp[0][0] = True  # Empty string matches empty pattern

        # Fill the DP table for patterns that can match an empty string
        for j in range(2, n + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]

        # Fill the DP table
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    # Check if we can match zero occurrence of the character before '*'
                    dp[i][j] = dp[i][j - 2]
                    # Check if we can match one or more occurrences of the character before '*'
                    if p[j - 2] == s[i - 1] or p[j - 2] == '.':
                        dp[i][j] = dp[i][j] or dp[i - 1][j]
                else:
                    # Direct match or '.' match
                    if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                        dp[i][j] = dp[i - 1][j - 1]

        return dp[m][n]