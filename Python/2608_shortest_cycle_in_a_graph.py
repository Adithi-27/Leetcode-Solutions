# -*- coding: utf-8 -*-
"""2608. Shortest Cycle in a Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSpFo1BTHTBuVVGEdpQPjbpb5tha772t
"""

class Solution:
    def findShortestCycle(self, n: int, edges: list[list[int]]) -> int:
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        shortest_cycle = float('inf')

        for start in range(n):
            distance = [-1] * n
            distance[start] = 0
            queue = deque([(start, -1)])

            while queue:
                current, parent = queue.popleft()

                for neighbor in graph[current]:
                    if distance[neighbor] == -1:
                        distance[neighbor] = distance[current] + 1
                        queue.append((neighbor, current))
                    elif neighbor != parent:
                        cycle_length = distance[current] + distance[neighbor] + 1
                        shortest_cycle = min(shortest_cycle, cycle_length)

        return shortest_cycle if shortest_cycle != float('inf') else -1