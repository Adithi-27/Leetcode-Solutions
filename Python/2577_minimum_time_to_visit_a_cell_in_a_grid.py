# -*- coding: utf-8 -*-
"""2577. Minimum Time to Visit a Cell In a Grid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCO466HUMIjHuuvqo8enqaqT7Ifz9mBo
"""

class Solution:
    def minimumTime(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])

        if grid[0][1] > 1 and grid[1][0] > 1:
            return -1

        heap = [(0, 0, 0)]
        visited = set()

        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        while heap:
            time, r, c = heappop(heap)

            if (r, c) == (m - 1, n - 1):
                return time

            if (r, c) in visited:
                continue
            visited.add((r, c))

            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited:
                    wait_time = max(0, grid[nr][nc] - time - 1)
                    if wait_time % 2 == 1:
                        wait_time += 1
                    heappush(heap, (time + 1 + wait_time, nr, nc))

        return -1