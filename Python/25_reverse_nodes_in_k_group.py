# -*- coding: utf-8 -*-
"""25. Reverse Nodes in k-Group.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOZ3NK2zouVceQ19hD_wfcQGGIyvzzZ1
"""

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        # Helper function to reverse k nodes
        def reverse(start: ListNode, k: int) -> ListNode:
            prev, curr = None, start
            while k > 0:
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
                k -= 1
            return prev

        # Check if we have k nodes to reverse
        count = 0
        node = head
        while node and count < k:
            node = node.next
            count += 1

        # If we have at least k nodes, we reverse them
        if count == k:
            new_head = reverse(head, k)  # reverse first k nodes
            # Recursively call for the remaining nodes
            head.next = self.reverseKGroup(node, k)
            return new_head
        # If less than k nodes, we return the head as is
        return head