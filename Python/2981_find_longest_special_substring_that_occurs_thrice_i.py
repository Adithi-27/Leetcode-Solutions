# -*- coding: utf-8 -*-
"""2981. Find Longest Special Substring That Occurs Thrice I.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fpVFyNM24h-nF9dKZx0842SxfCalg1_e
"""

class Solution:
    def maximumLength(self, s: str) -> int:
        def has_special_substring(length):
            freq = defaultdict(int)
            for i in range(len(s) - length + 1):
                substring = s[i:i + length]
                if len(set(substring)) == 1:
                    freq[substring] += 1
                    if freq[substring] >= 3:
                        return True
            return False

        left, right = 1, len(s)
        max_length = -1

        while left <= right:
            mid = (left + right) // 2
            if has_special_substring(mid):
                max_length = mid
                left = mid + 1
            else:
                right = mid - 1

        return max_length